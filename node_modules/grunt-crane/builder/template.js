var promise = require('../util/promise');
var path = require('path');

module.exports = function (grunt) {

    var env = grunt.config('env');
    var src   = path.join(grunt.config('src'), env);
    var dest  = path.join(grunt.config('dest'), env);

    function Builder(id) {

        var defer = promise.Deferred();
        
        this.id = id;
        this.done = defer.done;
        this.fail = defer.fail;

        try {

            this.content = grunt.file.read(path.join(src, id));

        } catch (e) {

            defer.reject(e.message);
            return;
        }

        defer.resolve();
    }

    Builder.prototype.getMessage = function () {
        return this.message || '';
    };

    Builder.prototype.getContent = function () {
        return this.content || '';
    };

    Builder.prototype.build = function () {

        try {

            var fn = new Function("obj",
                "var p=[],print=function(){p.push.apply(p,arguments);};" +

                // Introduce the data as local variables using with(){}
                "with(obj){p.push('" +

                // Convert the template into pure JavaScript
                this.content
                    .replace(/[\r\t\n]/g, " ")
                    .split("<%").join("\t")
                    .replace(/((^|%>)[^\t]*)'/g, "$1\r")
                    .replace(/\t=(.*?)%>/g, "',$1,'")
                    .split("\t").join("');")
                    .split("%>").join("p.push('")
                    .split("\r").join("\\'") +
                "');}return p.join('');");

            var content = 'define("'+this.id+'", [], function () { return ' + fn.toString() + '})';

            this.content = content;
            grunt.file.write(path.join(dest, this.id), content);

        } catch (e) {

            this.message = e.message;
            return false;
        }

        return true;
    };

    return Builder;
};