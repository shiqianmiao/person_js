var path = require('path');
var less = require('less');
var promise = require('../util/promise');

var Parser = less.Parser;

module.exports = function (grunt) {
    var minify   = grunt.config('compress');
    var rootpath = grunt.config('rootpath');
    var dest     = grunt.config('dest');
    var src      = grunt.config('src');

    function Builder (id) {
        var self = this;
        var defer = promise.Deferred();

        this.id = id;
        
        this.done = defer.done;
        this.fail = defer.fail;

        try {

            this.content = grunt.file.read(path.join(src, this.id));
        } catch (e) {

            defer.reject(e.message);
            return;
        }

        defer.resolve();
    }

    Builder.prototype.isCmbFile = function () {

        return CMB_JS_RE.test(this.id)
    };

    Builder.prototype.getChildren = function () {

        return this.children || [];
    };

    Builder.prototype.getMessage = function () {
        return this.message || '';
    };

    Builder.prototype.getContent = function () {
        return this.content || '';
    };

    Builder.prototype.build = function () {

        var parser = new Parser({
            compress: minify,
            yuicompress: false,
            optimization: 1,
            silent: false,
            lint: false,
            color: true,
            strictImports: false,
            rootpath: rootpath,
            relativeUrls: true,
            strictMaths: true,
            paths: [src, path.dirname(path.resolve(src + id))]
        });

        
    };
    return Builder;
};