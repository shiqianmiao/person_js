var promise = require('../util/promise');
var path = require('path');

var CMB_JS_RE = /\.cmb\.js$/;
var TPL_RE = /\.tpl$/;
var TRIM_RE = /^\s*(.*?)\s*$/;
var SLASH_RE = /\\\\/g;
var REQUIRE_RE = /"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|\/\*[\S\s]*?\*\/|\/(?:\\\/|[^\/\r\n])+\/(?=[^\/])|\/\/.*|\.\s*require|(?:^|[^$])\brequire\s*\(\s*(["'])(.+?)\1\s*\)/g;

var parseDependencies = function (code) {
  var ret = []

  code.replace(SLASH_RE, "")
      .replace(REQUIRE_RE, function(m, m1, m2) {
        if (m2) {
          ret.push(m2);
        }
      })

  return ret;
}

var trim = function (str) {

    return str.replace(TRIM_RE, function (match , url) {
        return url;
    });
}

function wrap (id, content, minify) {
    var match = [];
    var deps = [];

    deps = parseDependencies(content);

    deps = JSON.stringify(deps);

    content = 'define("' + id + '", ' + deps + ', function (require, exports, module) {\n' + content + '\n})';

    if (minify) {
        return require('uglify-js').minify(content,{fromString: true}).code;
    }

    return content;
}

module.exports = function (grunt) {

    var env = grunt.config('env');
    var src   = path.join(grunt.config('src'), env);
    var dest  = path.join(grunt.config('dest'), env);
    var minify = grunt.option('compress');

    function Builder (id) {

        var defer = promise.Deferred();

        this.id = id;
        this.done = defer.done;
        this.fail = defer.fail;

        try {

            this.content = grunt.file.read(path.join(src, this.id));

            if (this.isCmbFile()) {

                this.children = this.content.split(/\r?\n/).map(function (file) {
                    return trim(file);
                }).filter(function (file) {
                    return !!file;
                });
            }
        } catch (e) {

            defer.reject(e.message);
            return;
        }

        defer.resolve();
    }

    Builder.prototype.isCmbFile = function () {

        return CMB_JS_RE.test(this.id)
    };

    Builder.prototype.getChildren = function () {

        return this.children || [];
    };

    Builder.prototype.getMessage = function () {
        return this.message || '';
    };

    Builder.prototype.getContent = function () {
        return this.content || '';
    };

    Builder.prototype.build = function () {

        var content = '';

        try {
            if (this.isCmbFile()) {

                content = this.getChildren().map(function (file) {

                    var c = grunt.file.read(path.join(src, file));

                    if (TPL_RE.test(file)) {
                        var fn = new Function("obj",
                            "var p=[],print=function(){p.push.apply(p,arguments);};" +

                            // Introduce the data as local variables using with(){}
                            "with(obj){p.push('" +

                            // Convert the template into pure JavaScript
                            c
                            .replace(/[\r\t\n]/g, " ")
                            .split("<%").join("\t")
                            .replace(/((^|%>)[^\t]*)'/g, "$1\r")
                            .replace(/\t=(.*?)%>/g, "',$1,'")
                            .split("\t").join("');")
                            .split("%>").join("p.push('")
                            .split("\r").join("\\'") +
                            "');}return p.join('');");

                        c = 'return ' + fn.toString();
                    }
                    return wrap(file, c, minify);
                }).join('\n');

            } else {

                content = wrap(this.id, this.content, minify);
            }

            this.content = content;

            grunt.file.write(path.join(dest, this.id), content);

        } catch (e) {

            this.message = e.message;
            return false;
        }

        return true;
    };

    return Builder;
};

