var fs = require('fs');
var path = require('path');
var md5 = require('../util/md5');
var promise = require('../util/promise');


module.exports = function ( grunt ) {

    var env = grunt.option('env') || 'static',
        dbDir  = path.join(grunt.config('db'), env),
        srcDir = path.join(grunt.config('src'), env),
        reportDir = path.join(grunt.config('report'), env);

    var IMG_RE = /(jpg|png|jpeg|gif)$/;

    // report标志
    var token = Math.round(Date.now()/1000);

    grunt.config('env', env);

    try {
        grunt.db = grunt.file.readJSON(path.join(dbDir, 'db.json'));

    } catch (e) {
        grunt.db = {files:{}}; // 第一次编译
    }

    // 编译工具集
    var builders  = grunt.config.getRaw('builder').map(function (builder) {

        return [builder[0], require('../builder/' + builder[1])(grunt)];
    });

    // 注册编译任务
    grunt.registerTask('build', function () {

        // 指定编译文件列表
        var files = [].slice.call(arguments),
            imgs = [],
            others = [],
            report = {token:token};

        // 编译整个src目录
        if (!files.length) {

            files = grunt.file.expand({
                filter : function (path) {
                    return grunt .file.isFile(path);
                },
                cwd : path.join(process.cwd(), srcDir)
            }, '**/*');

        } else {
            
            // 目录
            var dirs = files.filter(function (file) {

                return grunt.file.isDir(srcDir, file);
            });

            // 分离出文件夹
            files = grunt.util._.difference(files, dirs);

            // 取出目录文件列表
            files = files.concat(grunt.util._.flatten(dirs.map(function (dir) {

                return grunt.file.expand({
                    filter : function (path) {
                        return grunt.file.isFile(path);
                    },
                    cwd : path.join(process.cwd(), srcDir)
                }, path.join(dir, '**/*'));
            })));
        }

        // 优先编译图片
        files.map(function (file) {

            if (IMG_RE.test(file)) {
                imgs.push(file);
            } else {
                others.push(file);
            }
        });

        files = imgs.concat(others);

        // 指定编译文件
        report.target = [].concat(files);

        // 添加关联文件(比如合并js,css文件)

        // 搜索文件
        var sFiles = files;
        // 数据文件
        var dbFiles = grunt.db.files;
        var dbKeys = Object.keys(dbFiles);

        // 循环遍历
        while(sFiles.length) {

            // 递归遍历
            sFiles = sFiles.reduce(function (l, s) {

                if (files.indexOf(s) === -1) {
                    files.push(s);
                }

                dbKeys.filter(function (k) {

                    var children = dbFiles[k].children;
                    if (!children) {
                        return false;
                    }

                    return children.indexOf(s) !== -1 &&
                        files.indexOf(k) === -1 &&
                        l.indexOf(k) === -1;

                }).forEach(function (k) {

                        l.push(k);
                });

                return l;
            }, []);
        }

        // 所有编译文件（包括关联受影响的）
        report.files = files;

        //编译文件个数
        report.total = 0;
        report.build = {};
        report.fail  = {};

        // 保证最后编译config.json
        files = grunt.util._.without(files, 'config.json');
        files.push('config.json');

        // 循环编译
        var defers = files.map(function (file) {

            var Builder, builder, defer, tmp;

            for (var i = 0, l = builders.length; i < l; i++) {

                tmp = builders[i];

                if (grunt.file.isMatch(tmp[0], file)) {

                    Builder = tmp[1];
                    break;
                }
            }

            if (!Builder) {
                return;
            }

            if (!grunt.db.files[file]) {

                grunt.db.files[file] = {};
            }

            builder = new Builder(file);

            defer = promise.Deferred();

            defer.done(function (msg) {

                msg = 'BUILD PASS : ' + file + ' ( ' + msg + ' )';
                grunt.log.ok(msg.green);
            }).fail(function (msg) {

                msg = 'BUILD FAIL : ' + file + ' ( ' + msg + ' )';
                grunt.log.error(msg.red);
            });

            builder.done(function () {

                if (builder.build()) {

                    var content = builder.getContent();

                    var code = md5(content);

                    var fileInfo = grunt.db.files[file];

                    var lastCode = fileInfo['md5'] || '';

                    // 关联文件 || 对比内容
                    if (code != lastCode) {

                        // unix时间戳
                        var timestamp = Math.round(Date.now()/1000);

                        fileInfo['timestamp'] = timestamp;
                        fileInfo['md5'] = code;

                        if (builder.isCmbFile && builder.isCmbFile()) {
                            fileInfo['children'] = builder.getChildren();
                        }

                        report['build'][file] = {'timestamp':timestamp,'status':'update'};

                        defer.resolve('update');

                    } else {

                        report['build'][file] = {'timestamp':fileInfo['timestamp'],'status':'skip'};
                        defer.resolve('skip');
                    }

                    if (file == 'config.json') {
                        report['build']['config.js'] = report['build'][file];
                        report['total']++;
                    }

                    report['total']++;

                } else {

                    defer.reject(builder.getMessage());
                }
            }).fail(function (msg) {

                defer.reject(msg);
            });

            return defer;
        });

        // grunt异步
        var done = this.async();

        promise.when(defers)
            .fail(function () {

                done(false);
            }).done(function () {

                if (report.total > 0) {
                    grunt.config('info', report);
                }
                done(true);
            }).always(function () {

                grunt.file.write(path.join(dbDir, 'db.json'), JSON.stringify(grunt.db, null, 4));

                if (report.total > 0) {
                    grunt.file.write(path.join(reportDir, '' + report.token), JSON.stringify(report, null, 4));

                }
            });
    });
};
