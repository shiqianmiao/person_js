var rsync = require('../util/rsync');
var promise = require('../util/promise');
var Memcached = require('memcached');
var path = require('path');

module.exports = function (grunt) {

    var config = grunt.config('deploy'),
        memConfig = grunt.config('memcached'),
        memKey = 'STATIC_CONFIG';

    grunt.registerTask('deploy', function (token) {

        var done = this.async(),
            env = grunt.config('env') || grunt.option('env') || 'test',
            memcached = new Memcached(memConfig[env]),
            reportDir = path.join(grunt.config('report'), env),
            destDir = path.join(grunt.config('dest'), env);

        var report;

        // 指定token
        if (token) {
            try {

                report = grunt.file.readJSON(path.join(reportDir, token));

            } catch (ex) {

                return grunt.log.error('report file not found');
            }
        } else {

            // 编译临时report
            report = grunt.config('info');

            // 最近一次report

            if (!report) {
                report = grunt.file.expand({
                    filter : function (path) {
                        return grunt.file.isFile(path);
                    },
                    cwd : path.join(process.cwd(), reportDir)
                }, '**/*');

                if (report.length > 0) {
                    report = grunt.util._.max(report);
                    report = grunt.file.readJSON(path.join(reportDir, report));
                } else {
                    report = null;
                }
                
            }

        }

        if (!report) {
            grunt.log.error('report not found');
            return;
        }

        var files = Object.keys(report.build);

        var servers = config[env];

        var isDeploy = true;

        var defers = servers.map(function (args) {
            var defer = promise.Deferred();

            if (!files.length) {

                if (isDeploy) {
                    isDeploy = false;
                    grunt.log.ok('no file');
                }

                defer.resolve();

                return defer;
            }

            args = files.concat(args);

            var cmd = 'rsync ' + args.join(' ');

            try {
                rsync(args, function (error, msg) {
                    if ( error ) {
                        grunt.log.writeln(msg.red);
                        // grunt.log.error(cmd.red);
                        defer.reject();
                    } else {
                        grunt.log.writeln(msg.green);
                        // grunt.log.ok(cmd.green);
                        defer.resolve();
                    }
                }, {cwd: path.join(process.cwd(), destDir)});
            } catch (ex) {
                grunt.log.writeln('\n'+ex.toString().red);
                defer.reject();
            }

            return defer.promise();
        });

        if (isDeploy) {

            promise.when(defers).done(function () {

                // 编译分发后去除memKey
                // memcached.del(memKey, function (error) {
                //     if(!error) {
                //         grunt.log.ok('success to clear static config from memcached..'.green);
                //     } else {
                //         grunt.log.error('fail to clear static config from memcached..'.red);
                //     }
                //     memcached.end();
                //     done(true);
                // });
            }).fail(function () {
                done(false);
            });
        } else {
            done(true);
        }

    });
};