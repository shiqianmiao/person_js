{
  "name": "grunt-crane",
  "description": "static file builder set",
  "version": "0.1.1",
  "homepage": "https://github.com/j1anb1n/grunt-crane",
  "author": {
    "name": "j1anb1n",
    "email": "chan.jianbin@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/j1anb1n/grunt-crane.git"
  },
  "bugs": {
    "url": "https://github.com/j1anb1n/grunt-crane/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/j1anb1n/gruntcrane/blob/master/LICENSE"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "sqwish": ">=0.0.1",
    "rsyncwrapper": ">=0.0.1",
    "less": ">=1.3.3",
    "grunt-contrib-jshint": ">=0.1.1",
    "grunt-contrib-uglify": ">=0.1.1",
    "grunt-contrib-concat": ">=0.1.2",
    "grunt": "~0.4.0",
    "rework": "*"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# Grunt Crane\n> 一个基于grunt的G.js模块编译工具\n\n## How To Use\n1. ```mkdir YourProject```\n2. ```npm install grunt-crane --save-dev```\n3. 新建一个Gruntfile.js\n3. ```svn co YOUR_CODE ./src```\n4. edit your code\n5. ```grunt build:YOUR_FILE deploy --env=local```\n\n如果你不想手动编译代码，我们还提供了自动编译的功能，只要执行：\n```grunt watch```\n每次你保存代码，就会自动编译并分发。\n\n### 目录结构\n```\n  Your Project/\n        build/\n        src/\n        report/\n        config.json\n        package.json\n        Gruntfile.js\n```\n\n### 示例Gruntfile.js\n```javascript\nmodule.exports = function(grunt) {\n    var config = grunt.file.readJSON('config.json');\n    grunt.initConfig(config);\n\n    // load npm tasks\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-crane');\n\n    grunt.registerTask('default', ['build']);\n};\n```\n\n# 关于Config.json\n示例\n\n```javascript\n{\n    \"rootpaths\": [\"http://static.gdotjs.org/\"],\n    \"src\": \"src/\",\n    \"dest\": \"build/\",\n    \"cacheExpire\": 604800000,\n    \"versionTemplate\": \"<%= url.href.replace(url.ext, '.__' + version + '__' + url.ext) %>\",\n    \"builder\": [\n        [\"config.json\", \"builder/config\"],\n        [\"**/*.tpl\", \"builder/template\"],\n        [\"g.js\", \"builder/copy\"],\n        [\"g-modern.js\", \"builder/copy\"],\n        [\"**/*.js\", \"builder/javascript\"],\n        [\"**/*.css\", \"builder/css\"],\n        [\"**/*.less\", \"builder/less\"],\n        [\"**/*.as\", \"builder/nothing\"],\n        [\"**/*\", \"builder/copy\"]\n    ],\n    \"deploy\": {\n        \"local\": [\n            [\"jianbin@127.0.0.1::static\", \"-avR\", \"--password-file=/Users/jianbin/.rsync_password\"]\n        ]\n    }\n}\n```\n\n\n\n> src\n\n源代码目录\n\n> dest\n\n编译目标目录\n\n> rootpaths\n\n这个标示着你的静态服务器的根路径，例如你有多台不同域名的静态服务器，你可以这么设置：\nrootpaths: ['http://sta1.a.com', 'http://sta2.a.com', 'http://static.b.com/v1/']\n\nrootpath会用于G.js的加载根路径，以及编译过程中对css中图片路径的处理之类的操作。\n\n> cacheExpire\n\ncacheExpire用来配置你的静态内容缓存的时间，这条配置将会用于生成版本号。\n\n> versionTemplate\n\n版本号的模板，遵循[microTemplate](http://ejohn.org/blog/javascript-micro-templating/)语法。\n示例中的:\n```<%= url.href.replace(url.ext, '.__' + version + '__' + url.ext) %>```\n\n生成的结果类似:```http://sta.a.com/lib/jquery/jquery.1.8.2.__1234567__.js```\n\n版本号会用于G.js加载模块时使用，以及css编译时，对于rootpaths下的图片文件也会自动添加版本号。\n\n> builder\n\n这条配置用于配置不同文件所适配的builder，配置采用数组形式。每一项为一个数组，第一项是文件的类型，第二个则标识着builder。\n文件只会匹配最先匹配到的一个builder进行编译，例如示例中的配置如果对g.js进行编译，则会匹配```builder/copy```，而不是```builder/javascript```。\n\n> deploy\n\ndeploy标识着分发服务器的配置。deploy可以为多个环境进行分发，例如：开发环境，测试环境，线上环境等。每个环境又可以对应着多台机器。\n目前deploy仅支持rsync的形式。\n\n# Tasks\n\n## grunt build\n这个任务用于编译文件，你可以指定文件路径进行编译，文件路径是相对于src目录的，例如编译```src/lib/jquery/jquery-1.8.2.js```:\n```\ngrunt build:lib/jquery/jquery-1.8.2.js\n```\n\n你也可以同时编译多个文件，用冒号隔开，例如：\n```\ngrunt build:file1:fil12\n```\n\n如果编译目标是一个文件夹，则会编译这个文件夹下的所有文件\n\n如果没有指定文件列表，则编译整个src目录。\n\n编译之后会生成一份报表json，保存在reports目录下。文件名是以当前时间戳生成，你可以通过```--token```参数来指定：\n```\ngrunt build --token=init\ngrunt build --token=issue-1\n```\n生成的report大致如下：\n```javascript\n{\n    \"token\": 1368069475232,\n    \"input\": [\n        \"lib/form/field.js\"\n    ],\n    \"files\": [\n        \"lib/form/field.js\"\n    ],\n    \"build\": {\n        \"config.json\": {\n            \"timestamp\": 1368069480000\n        },\n        \"config.js\": {\n            \"timestamp\": 1368069480000\n        },\n        \"lib/form/field.js\": {\n            \"timestamp\": 1368069480000\n        }\n    },\n    \"fail\": {}\n}\n```\n\n其中build字段就是这次编译任务所生成的文件，你使用这个字段进行分发。\n\n\n## grunt deploy\n这个任务用于分发文件，如果你跟build任务一起运行，那么会分发这次编译生成的文件。\n```\ngrunt build:lib/jquery/jquery-1.8.2.js deploy\n```\n\n你可以选择某个编译报告进行分发\n```\ngrunt deploy:issue-1\n```\n此时reports/issue-1.json中的build字段的文件将会被分发\n\n你可以通过```--env```参数来指定分发的目标环境:\n```\ngrunt deploy:issue-1 --env=local\n```\n这样可以通过rsync分发到你配置的local环境的所有机器上\n\n## grunt watch\n当处于开发状态时，每次保存都需要编译文件是一件很烦人的事情，因此我们提供了```watch```的功能。你只要简单的执行```grunt watch```，然后每次你保存代码的时候，编译和分发任务都会自动运行。\n\n\n# Comming soon\n\n1. 关于版本号\n",
  "_id": "grunt-crane@0.1.1",
  "dist": {
    "shasum": "d3ee089fff7268deb94d8182e86ef7574c78e29b"
  },
  "_from": "grunt-crane@0.1.1"
}
